/**
 * Curry + partial application function. Returned function can take multiple
 * arguments at once, initial arguments can also be specified during call to
 * curry.
 * @param {fn} - Function to curry.
 * @param {number} [arity] - Number of arguments, optional unless fn's prototype
 * doesn't specify it.
 * @param {*} [...args] - Make partial application with args.
 */
function curry(fn) {
  var args = Array.prototype.slice.call(arguments, 1);
  var arity = fn.length;

  return function curried() {
    args = args.concat(Array.prototype.slice.call(arguments));
    if (args.length >= arity)
      return fn.apply(this, args);
    else
      return curry.apply(this, Array.prototype.concat.call(fn).concat(args));
  };
}

module.exports = {
  curry: curry
};
